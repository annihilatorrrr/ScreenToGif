<Application x:Class="ScreenToGif.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:s="clr-namespace:System;assembly=System.Runtime"
             xmlns:c="clr-namespace:ScreenToGif.Controls;assembly=ScreenToGif.Controls"
             xmlns:v="clr-namespace:ScreenToGif.ViewModel;assembly=ScreenToGif.ViewModel"
             ShutdownMode="OnExplicitShutdown" Startup="App_Startup" Exit="App_Exit"
             DispatcherUnhandledException="App_DispatcherUnhandledException">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--Themes-->
                <ResourceDictionary Source="/Resources/Colors/Dark.xaml"/>
                <ResourceDictionary Source="/Resources/Colors/Light.xaml"/>

                <!--Drawings and Glyphs-->
                <ResourceDictionary Source="/Resources/Drawings.xaml"/>

                <!--Localizations-->
                <ResourceDictionary Source="/Resources/Localizations/StringResources.ar.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.cs.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.da.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.de.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.el.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.es-AR.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.es.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.fi.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.fr.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.ja.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.he.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.hu.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.ko.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.it.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.nl.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.pl.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.pt.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.pt-PT.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.ru.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.sw.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.sv.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.tr.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.uk.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.vi.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.zh.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.zh-Hant.xaml"/>
                <ResourceDictionary Source="/Resources/Localizations/StringResources.en.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <v:AppViewModel x:Key="AppViewModel"/>

            <c:NotifyIcon x:Key="NotifyIcon" IconSource="/Resources/Logo.ico" NotifyToolTipText="ScreenToGif" Visibility="Collapsed"
                          LeftClickCommand="{Binding TrayLeftClick}" DoubleLeftClickCommand="{Binding TrayDoubleLeftClick}" MiddleClickCommand="{Binding TrayMiddleClick}">
                <c:NotifyIcon.ContextMenu>
                    <ContextMenu>
                        <c:ExMenuItem Header="{StaticResource S.NewRecording}" Icon="Desktop" Command="{Binding ScreenRecorderCommand}" InputGestureText="{Binding RecorderGesture, UpdateSourceTrigger=PropertyChanged}" Tag="S.NewRecording"/>
                        <c:ExMenuItem Header="{StaticResource S.NewWebcamRecording}" Icon="Camera" Command="{Binding WebcamRecorderCommand}" InputGestureText="{Binding WebcamRecorderGesture, UpdateSourceTrigger=PropertyChanged}" Tag="S.NewWebcamRecording"/>
                        <c:ExMenuItem Header="{StaticResource S.NewBoardRecording}" Icon="InkStroke" Command="{Binding BoardRecorderCommand}" InputGestureText="{Binding BoardRecorderGesture, UpdateSourceTrigger=PropertyChanged}" Tag="S.NewBoardRecording"/>
                        <Separator/>
                        <c:ExMenuItem Header="{StaticResource S.StartUp.Editor}" Icon="WindowEdit" Command="{Binding EditorCommand}" InputGestureText="{Binding EditorGesture, UpdateSourceTrigger=PropertyChanged}" Tag="S.StartUp.Editor"/>
                        <c:ExMenuItem Header="{StaticResource S.StartUp.Options}" Icon="Setting" Command="{Binding OptionsCommand}" InputGestureText="{Binding OptionsGesture, UpdateSourceTrigger=PropertyChanged}" Tag="S.StartUp.Options"/>
                        <c:ExMenuItem Header="{StaticResource S.Feedback.Feedback}" Icon="HeartBroken" Command="{Binding FeedbackCommand}" Tag="S.Feedback.Feedback"/>
                        <c:ExMenuItem Header="{StaticResource S.Troubleshoot.Title}" Icon="ArrowSyncCircle" Command="{Binding TroubleshootCommand}" Tag="S.Troubleshoot.Title"/>
                        <Separator/>
                        <c:ExMenuItem Header="{StaticResource S.Exit}" Icon="Dismiss" Command="{Binding ExitApplicationCommand}" InputGestureText="{Binding ExitGesture, UpdateSourceTrigger=PropertyChanged}" Tag="S.Exit"/>
                    </ContextMenu>
                </c:NotifyIcon.ContextMenu>
            </c:NotifyIcon>

            <!--Focus-->
            <Style x:Key="Style.FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <!--<Border BorderThickness="3" BorderBrush="{DynamicResource Brush.FocusVisual}" CornerRadius="4" Margin="-4"/>-->
                            <Rectangle Margin="-4" SnapsToDevicePixels="True" Stroke="{DynamicResource Brush.FocusVisual}" StrokeThickness="3" RadiusX="4" RadiusY="4"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ContextMenu-->
            <Style TargetType="{x:Type ContextMenu}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
                <Setter Property="Placement" Value="Bottom"/>
                <Setter Property="HorizontalOffset" Value="-5"/>
                <Setter Property="Effect" Value="{DynamicResource Brush.ContextMenu.Shadow}"/>
                <Setter Property="Background" Value="{DynamicResource Brush.ContextMenu.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.ContextMenu.BorderBrush}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Margin="2" Padding="4" CornerRadius="7" Background="{TemplateBinding Background}">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ComboBoxItem-->
            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="FontWeight" Value="Normal"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Padding" Value="9,6"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="2"
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="4" Uid="Border_39">
                                <Grid>
                                    <Border x:Name="CheckedBorder" Background="{DynamicResource Brush.Item.Glyph}" Height="16" Width="3" CornerRadius="1.5"
                                            VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed"/>

                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"
                                                      ContentSource="Header" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" TextElement.Foreground="{TemplateBinding Foreground}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_39" VerticalAlignment="Center">
                                        <ContentPresenter.Resources>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"/>
                                            <!--To avoid using style defined in app.xaml-->
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="IsMouseCaptured" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Height" Value="10"/>
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="CheckedBorder" Property="Background" Value="{DynamicResource Brush.Item.Glyph.Disabled}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="False"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsMouseOver" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Pressed}"/>
                    </MultiTrigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Disabled}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ToolTip-->
            <Style TargetType="{x:Type ToolTip}">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Foreground}"/>
                <Setter Property="Background" Value="{DynamicResource Brush.ContextMenu.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.ContextMenu.Border}"/>
                <Setter Property="MinWidth" Value="20"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Effect" Value="{DynamicResource Brush.Tooltip.Shadow}"/>
                
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Border Background="{TemplateBinding Background}" Margin="2" Padding="5" CornerRadius="4" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}">
                                <ContentPresenter Content="{TemplateBinding Content}" Width="Auto" HorizontalAlignment="Center" TextBlock.Foreground="{TemplateBinding Foreground}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--Hyperlink-->
            <Style TargetType="{x:Type Hyperlink}">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Hyperlink.Foreground}"/>
                <Setter Property="TextDecorations" Value="None"/>
                <Setter Property="Cursor" Value="Hand"/>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Hyperlink.Background.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Hyperlink.Foreground.Hover}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Hyperlink.Foreground.Disabled}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Cursor" Value="No"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Separator-->
            <Style TargetType="{x:Type Separator}">
                <Setter Property="Background" Value="{DynamicResource Brush.Separator.Background}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Rectangle Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Fill="{TemplateBinding Background}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Background" Value="{DynamicResource Brush.Separator.Background}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Rectangle Fill="{TemplateBinding Background}" Height="1" Margin="0,4"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--TextBlock-->
            <Style TargetType="{x:Type TextBlock}">
                <!--<Setter Property="Foreground" Value="{DynamicResource Brush.Foreground}"/>-->
                <Setter Property="FontFamily" Value="Segoe UI"/>
            </Style>

            <!--ScrollBar Styles-->
            <Style x:Key="Style.ScrollBar.Button" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Opacity" Value="0"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Path x:Name="Arrow" Stretch="None" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
                                  Fill="{DynamicResource Brush.ScrollBar.Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Style.ScrollBar.Thumb" TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Background" Value="{DynamicResource Brush.ScrollBar.Foreground}"/>
                <Setter Property="BorderThickness" Value="0"/>
                
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Background="{TemplateBinding Background}" Margin="{TemplateBinding Padding}" CornerRadius="3"
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="Style.ScrollBar.Transparent" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ScrollBar-->
            <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.ScrollBar.Foreground}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="12"/>
                <Setter Property="MinWidth" Value="12"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}" CornerRadius="9">
                                <Grid x:Name="Bg" SnapsToDevicePixels="True">
                                    <Grid.RowDefinitions>
                                        <RowDefinition MaxHeight="16"/>
                                        <RowDefinition Height="0.00001*"/>
                                        <RowDefinition MaxHeight="16"/>
                                    </Grid.RowDefinitions>

                                    <RepeatButton Grid.Row="0" x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource Style.ScrollBar.Button}" 
                                                  Content="m1 6q-0.2 0-0.4-0.1-0.2-0.1-0.3-0.2-0.1-0.1-0.2-0.3-0.1-0.2-0.1-0.4 0-0.2 0-0.3 0.1-0.1 0.2-0.3l2.6-3.8q0.1-0.1 0.2-0.2 0.2-0.1 0.3-0.2 0.2-0.1 0.3-0.1 0.2-0.1 0.4-0.1 0.2 0 0.4 0.1 0.1 0 0.3 0.1 0.1 0.1 0.3 0.2 0.1 0.1 0.2 0.2l2.6 3.8q0.1 0.2 0.2 0.3 0 0.1 0 0.3 0 0.2-0.1 0.4-0.1 0.2-0.2 0.3-0.1 0.1-0.3 0.2-0.2 0.1-0.4 0.1z"/>

                                    <Track Grid.Row="1" x:Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource Style.ScrollBar.Transparent}"/>
                                        </Track.DecreaseRepeatButton>

                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource Style.ScrollBar.Transparent}"/>
                                        </Track.IncreaseRepeatButton>

                                        <Track.Thumb>
                                            <Thumb x:Name="ScrollThumb" Style="{StaticResource Style.ScrollBar.Thumb}" Width="2"/>
                                        </Track.Thumb>
                                    </Track>

                                    <RepeatButton Grid.Row="2" x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource Style.ScrollBar.Button}" 
                                                  Content="m0 1q0-0.2 0.1-0.4 0.1-0.2 0.2-0.3 0.1-0.1 0.3-0.2 0.2-0.1 0.4-0.1h6q0.2 0 0.4 0.1 0.2 0.1 0.3 0.2 0.1 0.1 0.2 0.3 0.1 0.2 0.1 0.4 0 0.2 0 0.3-0.1 0.1-0.2 0.3l-2.6 3.8q-0.2 0.3-0.5 0.4-0.3 0.2-0.7 0.2-0.4 0-0.7-0.2-0.3-0.1-0.5-0.4l-2.6-3.8q-0.1-0.2-0.2-0.3 0-0.1 0-0.3z"/>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ScrollThumb" Property="Width" Value="6"/>
                                    <Setter TargetName="ScrollThumb" Property="Margin" Value="3,0"/>
                                    <Setter TargetName="PART_LineUpButton" Property="Opacity" Value="1"/>
                                    <Setter TargetName="PART_LineDownButton" Property="Opacity" Value="1"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.6"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.ScrollBar.Background}"/>
                    </Trigger>

                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="MinWidth" Value="0"/>
                        <Setter Property="Height" Value="12"/>
                        <Setter Property="MinHeight" Value="12"/>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}" CornerRadius="9">
                                        <Grid x:Name="Bg" SnapsToDevicePixels="True">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition MaxWidth="16"/>
                                                <ColumnDefinition Width="0.00001*"/>
                                                <ColumnDefinition MaxWidth="16"/>
                                            </Grid.ColumnDefinitions>

                                            <RepeatButton Grid.Column="0" x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource Style.ScrollBar.Button}" 
                                                          Content="m0 4q0-0.4 0.2-0.7 0.1-0.3 0.4-0.5l3.8-2.6q0.2-0.1 0.3-0.2 0.1 0 0.3 0 0.2 0 0.4 0.1 0.2 0.1 0.3 0.2 0.1 0.1 0.2 0.3 0.1 0.2 0.1 0.4v6q0 0.2-0.1 0.4-0.1 0.2-0.2 0.3-0.1 0.1-0.3 0.2-0.2 0.1-0.4 0.1-0.3 0-0.6-0.2l-3.8-2.6q-0.3-0.2-0.4-0.5-0.2-0.3-0.2-0.7z" />

                                            <Track Grid.Column="1" x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                                <Track.DecreaseRepeatButton>
                                                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource Style.ScrollBar.Transparent}"/>
                                                </Track.DecreaseRepeatButton>

                                                <Track.IncreaseRepeatButton>
                                                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource Style.ScrollBar.Transparent}"/>
                                                </Track.IncreaseRepeatButton>

                                                <Track.Thumb>
                                                    <Thumb x:Name="ScrollThumb" Style="{StaticResource Style.ScrollBar.Thumb}" Height="2"/>
                                                </Track.Thumb>
                                            </Track>

                                            <RepeatButton Grid.Column="2" x:Name="PART_LineRightButton" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource Style.ScrollBar.Button}" 
                                                          Content="m0 7v-6q0-0.2 0.1-0.4 0.1-0.2 0.2-0.3 0.1-0.1 0.3-0.2 0.2-0.1 0.4-0.1 0.3 0 0.6 0.2l3.8 2.6q0.3 0.2 0.4 0.5 0.2 0.3 0.2 0.7 0 0.4-0.2 0.7-0.1 0.3-0.4 0.5l-3.8 2.6q-0.3 0.2-0.6 0.2-0.2 0-0.4-0.1-0.2-0.1-0.3-0.2-0.1-0.1-0.2-0.3-0.1-0.2-0.1-0.4z" />
                                        </Grid>
                                    </Border>
                                    
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="ScrollThumb" Property="Height" Value="6"/>
                                            <Setter TargetName="ScrollThumb" Property="Margin" Value="0,3"/>
                                            <Setter TargetName="PART_LineLeftButton" Property="Opacity" Value="1"/>
                                            <Setter TargetName="PART_LineRightButton" Property="Opacity" Value="1"/>
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" Value="0.6"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <ControlTemplate x:Key="Template.RepeatButton.Simple" TargetType="RepeatButton">
                <Grid/>
            </ControlTemplate>

            <ControlTemplate x:Key="Template.Slider.Thumb" TargetType="{x:Type Thumb}">
                <Border x:Name="OutterBorder" Background="{DynamicResource Brush.Fill.Control.Solid.Default}" Padding="4" BorderBrush="{DynamicResource Brush.Elevation.Circle.Border}" BorderThickness="1" CornerRadius="999">
                    <Border x:Name="InnerBorder" Background="{DynamicResource Brush.Fill.Accent.Default}" CornerRadius="999"/>
                </Border>

                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="OutterBorder" Property="Padding" Value="3"/>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource Brush.Fill.Accent.Secondary}"/>
                    </Trigger>

                    <Trigger Property="IsDragging" Value="True">
                        <Setter TargetName="OutterBorder" Property="Padding" Value="5"/>
                        <Setter TargetName="OutterBorder" Property="BorderBrush" Value="{DynamicResource Brush.Stroke.Control.Default}"/>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource Brush.Fill.Accent.Tertiary}"/>
                    </Trigger>

                    <Trigger Property="IsDragging" Value="True">
                        <Setter TargetName="OutterBorder" Property="Padding" Value="5"/>
                        <Setter TargetName="OutterBorder" Property="BorderBrush" Value="{DynamicResource Brush.Stroke.Control.Default}"/>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource Brush.Fill.Accent.Tertiary}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource Brush.Fill.Accent.Disabled}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--ScrollViewer-->
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <ScrollContentPresenter Grid.Row="0" Grid.Column="0" x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" 
                                                        CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>

                                <ScrollBar Grid.Row="0" Grid.Column="1" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow"
                                           Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                                           Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>

                                <ScrollBar Grid.Row="1" Grid.Column="0" x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" 
                                           Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                           Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ListView-->
            <Style TargetType="{x:Type ListView}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <!--ListViewItem-->
            <Style TargetType="{x:Type ListViewItem}">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="FontWeight" Value="Normal"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Padding" Value="9,6"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="2"
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="4" Uid="Border_39">
                                <Grid>
                                    <Border x:Name="CheckedBorder" Background="{DynamicResource Brush.Item.Glyph}" Height="16" Width="3" CornerRadius="1.5"
                                            VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed"/>

                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"
                                                      ContentSource="Header" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" TextElement.Foreground="{TemplateBinding Foreground}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_39" VerticalAlignment="Center">
                                        <ContentPresenter.Resources>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"/>
                                            <!--To avoid using style defined in app.xaml-->
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="IsMouseCaptured" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Height" Value="10"/>
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="CheckedBorder" Property="Background" Value="{DynamicResource Brush.Item.Glyph.Disabled}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="False"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsMouseOver" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Pressed}"/>
                    </MultiTrigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Disabled}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--Slider-->
            <Style TargetType="{x:Type Slider}">
                <Setter Property="Background" Value="{DynamicResource Brush.Fill.Control.Strong.Default}"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisual}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Slider">
                            <Grid x:Name="HorizontalTemplate" Background="#01000000">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <TickBar x:Name="TopTick" Grid.Row="0" Fill="{TemplateBinding BorderBrush}" TickFrequency="1" Height="4" Margin="0,0,0,2" Placement="Top" Visibility="Collapsed"/>
                                <TickBar x:Name="BottomTick" Grid.Row="2" Fill="{TemplateBinding BorderBrush}" TickFrequency="1" Height="4" Margin="0,1,0,0" Placement="Bottom" Visibility="Collapsed"/>

                                <Border x:Name="TrackBorder" Grid.Row="1" Background="{TemplateBinding Background}" BorderThickness="0" Height="3" CornerRadius="2" VerticalAlignment="Center" Margin="4,0">
                                    <Canvas Margin="-6,-1">
                                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource Brush.Fill.Accent.Default}" Height="4.0" Visibility="Hidden"/>
                                    </Canvas>
                                </Border>

                                <Track Grid.Row="1" x:Name="PART_Track">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton x:Name="HorizontalTrackLargeChangeDecreaseRepeatButton" Template="{StaticResource Template.RepeatButton.Simple}" Background="Transparent" IsTabStop="False" ClickMode="Release"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton x:Name="HorizontalTrackLargeChangeIncreaseRepeatButton" Template="{StaticResource Template.RepeatButton.Simple}" Background="Transparent" IsTabStop="False" ClickMode="Release"/>
                                    </Track.IncreaseRepeatButton>

                                    <Track.Thumb>
                                        <Thumb x:Name="HorizontalThumb" Height="20" Width="20" Template="{StaticResource Template.Slider.Thumb}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                                    <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{DynamicResource Brush.Fill.Control.Solid.Default}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.Elevation.Circle.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ExSlider-->
            <Style TargetType="{x:Type c:ExSlider}" BasedOn="{StaticResource {x:Type Slider}}"></Style>

            <!--ToggleButton-->
            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Background" Value="{DynamicResource Brush.Button.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="3,1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="MainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="4" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                                <ContentPresenter x:Name="ContentPresenter" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Accent}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent}"/>
                    </Trigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"/>
                            <Condition Property="IsChecked" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Hover}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"/>
                            <Condition Property="IsChecked" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent.Hover}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Accent.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="True"/>
                            <Condition Property="IsChecked" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Pressed}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Pressed}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Pressed}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="True"/>
                            <Condition Property="IsChecked" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent.Pressed}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Accent.Pressed}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent.Pressed}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEnabled" Value="False"/>
                            <Condition Property="IsChecked" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Disabled}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Disabled}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEnabled" Value="False"/>
                            <Condition Property="IsChecked" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent.Disabled}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Accent.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent.Disabled}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <!--ToggleButton • Borderless-->
            <Style x:Key="Style.ToggleButton.Borderless" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="MainBorder" BorderBrush="Transparent" BorderThickness="0" Padding="{TemplateBinding Padding}"
                                    CornerRadius="4" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                                <ContentPresenter x:Name="ContentPresenter" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent}"/>
                    </Trigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"/>
                            <Condition Property="IsChecked" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"/>
                            <Condition Property="IsChecked" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent.Hover}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="True"/>
                            <Condition Property="IsChecked" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Pressed}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Pressed}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="True"/>
                            <Condition Property="IsChecked" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent.Pressed}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent.Pressed}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEnabled" Value="False"/>
                            <Condition Property="IsChecked" Value="False"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Disabled}"/>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEnabled" Value="False"/>
                            <Condition Property="IsChecked" Value="True"/>
                        </MultiTrigger.Conditions>

                        <Setter Property="Background" Value="{DynamicResource Brush.Button.Background.Accent.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Accent.Disabled}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <!--Button • Borderless-->
            <Style x:Key="Style.Button.Borderless" TargetType="{x:Type c:ExButton}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type c:ExButton}">
                            <Border x:Name="MainBorder" BorderBrush="Transparent" BorderThickness="0" Padding="{TemplateBinding Padding}"
                                    CornerRadius="4" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <ContentPresenter Grid.Row="0" x:Name="ContentPresenter" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                                    <TextBlock Grid.Row="1" x:Name="KeyGestureTextBlock" Text="{TemplateBinding KeyGesture}" Foreground="{DynamicResource Brush.Button.Foreground}" 
                                               FontSize="10" HorizontalAlignment="Center" Margin="0" Padding="0" Opacity="0.8" Height="12"/>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="KeyGesture" Value="{x:Null}">
                                    <Setter TargetName="KeyGestureTextBlock" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="KeyGesture" Value="{x:Static s:String.Empty}">
                                    <Setter TargetName="KeyGestureTextBlock" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Hover}"/>
                    </Trigger>

                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Pressed}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Pressed}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Disabled}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!--ToggleButton • Borderless-->
            <Style x:Key="Style.RepeatButton.Borderless" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border x:Name="MainBorder" BorderBrush="Transparent" BorderThickness="0" Padding="{TemplateBinding Padding}"
                                    CornerRadius="4" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                                <ContentPresenter x:Name="ContentPresenter" Focusable="False" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Hover}"/>
                    </Trigger>

                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Pressed}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Pressed}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Disabled}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Disabled}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>