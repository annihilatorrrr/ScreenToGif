<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:ScreenToGif.Controls">

    <!--SplitButton • Border • No Text-->
    <Style TargetType="{x:Type c:SplitButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="IsTabStop" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type c:SplitButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" CornerRadius="4">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" MinWidth="20"/>
                                <ColumnDefinition Width="1"/>
                                <ColumnDefinition Width="22"/>
                            </Grid.ColumnDefinitions>

                            <Border Grid.Column="0" x:Name="LeftBorder" CornerRadius="4,0,0,4" BorderThickness="1,1,0,1"
                                    Background="{DynamicResource Brush.Button.Background}" BorderBrush="{DynamicResource Brush.Button.Border}">
                                <c:ExButton x:Name="ActionButton" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" Padding="8,2" Background="Transparent" BorderBrush="Transparent">
                                    <StackPanel Orientation="Horizontal">
                                        <c:SymbolIcon Symbol="{TemplateBinding Icon}" FontSize="14" VerticalAlignment="Center"/>
                                        <ContentPresenter Content="{TemplateBinding Header}" Margin="4,0,0,0" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </c:ExButton>
                            </Border>
                            
                            <Separator Grid.Column="1" x:Name="Separator" BorderBrush="{TemplateBinding BorderBrush}" Width="1" Margin="0"/>

                            <Border Grid.Column="2" x:Name="RightBorder" CornerRadius="0,4,4,0" BorderThickness="0,1,1,1"
                                    Background="{DynamicResource Brush.Button.Background}" BorderBrush="{DynamicResource Brush.Button.Border}">
                                <ToggleButton  x:Name="ExpanderButton" Background="Transparent" BorderBrush="Transparent">
                                    <c:SymbolIcon Symbol="ChevronDown" FontSize="12"/>
                                </ToggleButton>
                            </Border>
                            
                            <Popup Grid.Column="2" x:Name="Popup" Placement="Bottom" IsOpen="{Binding ElementName=ExpanderButton, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                   AllowsTransparency="True" StaysOpen="False" HorizontalOffset="-2" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <Border Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1" Margin="6" Padding="4" CornerRadius="7"
                                        Background="{DynamicResource Brush.ContextMenu.Background}" BorderBrush="{DynamicResource Brush.ContextMenu.Border}" Effect="{DynamicResource Brush.ContextMenu.Shadow}">
                                    <StackPanel x:Name="InnerStackPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ExpanderButton" Property="IsMouseOver" Value="False">
                            <Setter Property="StaysOpen" TargetName="Popup" Value="False"/>
                            <Setter Property="Focusable" TargetName="Popup" Value="False"/>
                        </Trigger>

                        <Trigger SourceName="ActionButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="LeftBorder" Property="Background" Value="{DynamicResource Brush.Button.Background.Hover}"/>
                            <Setter TargetName="LeftBorder" Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Hover}"/>
                            <Setter TargetName="ActionButton" Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Hover}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Hover}"/>
                        </Trigger>

                        <Trigger SourceName="ActionButton" Property="IsPressed" Value="True">
                            <Setter TargetName="LeftBorder" Property="Background" Value="{DynamicResource Brush.Button.Background.Pressed}"/>
                            <Setter TargetName="LeftBorder" Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Pressed}"/>
                            <Setter TargetName="ActionButton" Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Pressed}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Pressed}"/>
                        </Trigger>

                        <Trigger SourceName="ExpanderButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="RightBorder" Property="Background" Value="{DynamicResource Brush.Button.Background.Hover}"/>
                            <Setter TargetName="RightBorder" Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Hover}"/>
                            <Setter TargetName="ExpanderButton" Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Hover}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Hover}"/>

                            <Setter Property="StaysOpen" TargetName="Popup" Value="True"/>
                            <Setter Property="Focusable" TargetName="Popup" Value="False"/>
                        </Trigger>

                        <Trigger SourceName="ExpanderButton" Property="IsPressed" Value="True">
                            <Setter TargetName="RightBorder" Property="Background" Value="{DynamicResource Brush.Button.Background.Pressed}"/>
                            <Setter TargetName="RightBorder" Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Pressed}"/>
                            <Setter TargetName="ExpanderButton" Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Pressed}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Button.Border.Pressed}"/>
                        </Trigger>

                        <Trigger SourceName="ExpanderButton" Property="IsChecked" Value="True">
                            <Setter TargetName="ExpanderButton" Property="Foreground" Value="{DynamicResource Brush.Button.Foreground.Pressed}"/>
                        </Trigger>

                        <Trigger SourceName="Popup" Property="IsOpen" Value="True">
                            <Setter TargetName="ExpanderButton" Property="IsHitTestVisible" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>