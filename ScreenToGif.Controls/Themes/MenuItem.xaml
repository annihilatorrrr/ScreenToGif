<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:ScreenToGif.Controls">

    <Style TargetType="{x:Type c:ExMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}, FallbackValue={x:Static HorizontalAlignment.Left}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}, FallbackValue={x:Static VerticalAlignment.Center}}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5,6"/>
        <Setter Property="Height" Value="32"/>

        <!--SubmenuItem-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type c:ExMenuItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            CornerRadius="4" SnapsToDevicePixels="True" Uid="Border_38">
                        <Grid Uid="Grid_49">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemGestureColumnGroup" Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Border Grid.Column="0" x:Name="CheckedBorder" Background="{DynamicResource Brush.Item.Glyph}" Height="16" Width="3" CornerRadius="1.5"
                                    VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed"/>

                            <c:SymbolIcon Grid.Column="0" x:Name="SymbolIcon" Symbol="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}"
                                          VerticalAlignment="Center" HorizontalAlignment="Center" Margin="6"/>

                            <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}"
                                              ContentSource="Header" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"
                                              TextBlock.Foreground="{TemplateBinding Foreground}" TextElement.Foreground="{TemplateBinding Foreground}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_33">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"/>
                                    <!--To avoid using style defined in app.xaml-->
                                </ContentPresenter.Resources>
                            </ContentPresenter>

                            <TextBlock Grid.Column="2" x:Name="InputGestureText" Uid="TextBlock_10" Margin="6" Text="{TemplateBinding InputGestureText}" 
                                       Foreground="{DynamicResource Brush.Item.Hint}" FontSize="12" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentPresenter" Property="Margin" Value="9,6"/>
                        </Trigger>

                        <Trigger Property="Icon" Value="None">
                            <Setter Property="Visibility" TargetName="SymbolIcon" Value="Collapsed"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CheckedBorder" Property="Height" Value="10"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckedBorder" Property="Background" Value="{DynamicResource Brush.Item.Glyph.Disabled}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsCheckable" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Padding" Value="6,2"/>
                <Setter Property="MinHeight" Value="26"/>
                <Setter Property="MinWidth" Value="50"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type c:ExMenuItem}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_39">
                                <Grid Uid="Grid_49" IsSharedSizeScope="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemGestureColumnGroup" Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <Border Grid.Column="0" x:Name="CheckedBorder" Background="{DynamicResource Brush.Item.Glyph}" Height="16" Width="3" CornerRadius="1.5"
                                            VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed"/>

                                    <c:SymbolIcon Grid.Column="0" x:Name="SymbolIcon" Symbol="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center" Margin="6"/>

                                    <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" 
                                                      ContentSource="Header" Margin="3,0" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" TextElement.Foreground="{TemplateBinding Foreground}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_39" VerticalAlignment="Center">
                                        <ContentPresenter.Resources>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"/>
                                            <!--To avoid using style defined in app.xaml-->
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>

                                    <TextBlock Grid.Column="2" x:Name="InputGestureText" Uid="TextBlock_10" Margin="6" Text="{TemplateBinding InputGestureText}" 
                                               Foreground="{DynamicResource Brush.Item.Hint}" FontSize="12" VerticalAlignment="Center"/>

                                    <Popup Name="Popup" Grid.Column="2" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" VerticalOffset="-2">
                                        <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource Brush.ContextMenu.Background}" BorderBrush="{DynamicResource Brush.ContextMenu.Border}"
                                                BorderThickness="1" Effect="{DynamicResource Brush.ContextMenu.Shadow}" CornerRadius="7" Margin="2" Padding="4">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ContentPresenter" Property="Margin" Value="9,6"/>
                                </Trigger>

                                <Trigger Property="Icon" Value="None">
                                    <Setter Property="Visibility" TargetName="SymbolIcon" Value="Collapsed"/>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Height" Value="10"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="CheckedBorder" Property="Background" Value="{DynamicResource Brush.Item.Glyph.Disabled}"/>
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="IsCheckable" Value="True"/>
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type c:ExMenuItem}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="4" Uid="Border_39">
                                <Grid Uid="Grid_49" IsSharedSizeScope="False">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemGestureColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="14"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemChevronColumnGroup" MinWidth="5" Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <Border Grid.Column="0" x:Name="CheckedBorder" Background="{DynamicResource Brush.Item.Glyph}" Height="16" Width="3" CornerRadius="1.5"
                                            VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed"/>

                                    <c:SymbolIcon Grid.Column="0" x:Name="SymbolIcon" Symbol="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center" Margin="6"/>

                                    <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" 
                                                      ContentSource="Header" Margin="3,0" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" TextElement.Foreground="{TemplateBinding Foreground}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_39" VerticalAlignment="Center">
                                        <ContentPresenter.Resources>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"/>
                                            <!--To avoid using style defined in app.xaml-->
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>

                                    <TextBlock Grid.Column="2" x:Name="InputGestureText" Uid="TextBlock_10" Margin="6" Text="{TemplateBinding InputGestureText}" 
                                               Foreground="{DynamicResource Brush.Item.Hint}" FontSize="12" VerticalAlignment="Center"/>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ContentPresenter" Property="Margin" Value="9,6"/>
                                </Trigger>

                                <Trigger Property="Icon" Value="None">
                                    <Setter Property="Visibility" TargetName="SymbolIcon" Value="Collapsed"/>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Height" Value="10"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="CheckedBorder" Property="Background" Value="{DynamicResource Brush.Item.Glyph.Disabled}"/>
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="IsCheckable" Value="True"/>
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type c:ExMenuItem}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="4" Uid="Border_42">
                                <Grid Uid="Grid_50">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemGestureColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="14"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemChevronColumnGroup" MinWidth="5" Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <Border Grid.Column="0" x:Name="CheckedBorder" Background="{DynamicResource Brush.Item.Glyph}" Height="16" Width="3" CornerRadius="1.5"
                                            VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed"/>

                                    <c:SymbolIcon Grid.Column="0" x:Name="SymbolIcon" Symbol="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center" Margin="6"/>

                                    <ContentPresenter Grid.Column="1" x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" 
                                                      ContentSource="Header" Margin="3,0" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" TextElement.Foreground="{TemplateBinding Foreground}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_39" VerticalAlignment="Center">
                                        <ContentPresenter.Resources>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}"/>
                                            <!--To avoid using style defined in app.xaml-->
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>

                                    <TextBlock Grid.Column="2" x:Name="InputGestureText" Uid="TextBlock_10" Margin="6" Text="{TemplateBinding InputGestureText}" 
                                               Foreground="{DynamicResource Brush.Item.Hint}" FontSize="12" VerticalAlignment="Center"/>

                                    <c:SymbolIcon Grid.Column="3" x:Name="ChevronSymbolIcon" Symbol="ChevronRight" Foreground="{TemplateBinding Foreground}" FontSize="12"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center" Margin="4,0,6,0"/>

                                    <Popup Name="Popup" Grid.Column="3" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" VerticalOffset="-2">
                                        <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource Brush.ContextMenu.Background}" BorderBrush="{DynamicResource Brush.ContextMenu.Border}"
                                                BorderThickness="1" Effect="{DynamicResource Brush.ContextMenu.Shadow}" CornerRadius="7" Margin="2" Padding="4">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="ContentPresenter" Property="Margin" Value="9,6"/>
                                </Trigger>

                                <Trigger Property="Icon" Value="None">
                                    <Setter Property="Visibility" TargetName="SymbolIcon" Value="Collapsed"/>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="CheckedBorder" Property="Height" Value="10"/>
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="CheckedBorder" Property="Background" Value="{DynamicResource Brush.Item.Glyph.Disabled}"/>
                                </Trigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="IsCheckable" Value="True"/>
                                    </MultiTrigger.Conditions>

                                    <Setter TargetName="CheckedBorder" Property="Visibility" Value="Visible"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Hover}"/>
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Hover}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Hover}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Pressed}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Pressed}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Brush.Item.Background.Disabled}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Item.Foreground.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>